"""
–ü—Ä–æ—Å—Ç–æ–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –ë–ï–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç —Ä—É—á–Ω–æ–π —Å–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/parse_exercises_simple.py
"""

import json
import os
import requests
from typing import Dict, List, Optional
import time


class SimpleExerciseParser:
    """–£–ø—Ä–æ—â—ë–Ω–Ω—ã–π –ø–∞—Ä—Å–µ—Ä –±–µ–∑ –∞–≤—Ç–æ–ø–µ—Ä–µ–≤–æ–¥–∞"""
    
    GITHUB_API = "https://api.github.com/repos/wrkout/exercises.json/contents/exercises"
    RAW_BASE_URL = "https://raw.githubusercontent.com/wrkout/exercises.json/master/exercises"
    
    # –°–ª–æ–≤–∞—Ä—å –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –Ω–∞–∑–≤–∞–Ω–∏–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–ø–æ–ø—É–ª—è—Ä–Ω—ã–µ)
    EXERCISE_NAMES = {
        # –ì—Ä—É–¥—å
        'Bench Press': '–ñ–∏–º –ª—ë–∂–∞',
        'Incline Bench Press': '–ñ–∏–º –Ω–∞ –Ω–∞–∫–ª–æ–Ω–Ω–æ–π —Å–∫–∞–º—å–µ',
        'Decline Bench Press': '–ñ–∏–º –Ω–∞ —Å–∫–∞–º—å–µ —Å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –Ω–∞–∫–ª–æ–Ω–æ–º',
        'Dumbbell Bench Press': '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π –ª—ë–∂–∞',
        'Push-Up': '–û—Ç–∂–∏–º–∞–Ω–∏—è',
        'Chest Fly': '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ —Ä—É–∫',
        'Cable Crossover': '–°–≤–µ–¥–µ–Ω–∏–µ —Ä—É–∫ –≤ –∫—Ä–æ—Å—Å–æ–≤–µ—Ä–µ',
        
        # –°–ø–∏–Ω–∞
        'Deadlift': '–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞',
        'Pull-Up': '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è',
        'Chin-Up': '–ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞—Ç–Ω—ã–º —Ö–≤–∞—Ç–æ–º',
        'Lat Pulldown': '–¢—è–≥–∞ –≤–µ—Ä—Ö–Ω–µ–≥–æ –±–ª–æ–∫–∞',
        'Barbell Row': '–¢—è–≥–∞ —à—Ç–∞–Ω–≥–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ',
        'Dumbbell Row': '–¢—è–≥–∞ –≥–∞–Ω—Ç–µ–ª–∏ –≤ –Ω–∞–∫–ª–æ–Ω–µ',
        'Seated Cable Row': '–¢—è–≥–∞ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–æ–≥–æ –±–ª–æ–∫–∞',
        'T-Bar Row': '–¢—è–≥–∞ –¢-–≥—Ä–∏—Ñ–∞',
        
        # –ù–æ–≥–∏
        'Squat': '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
        'Front Squat': '–§—Ä–æ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏—Å–µ–¥–∞–Ω–∏—è',
        'Leg Press': '–ñ–∏–º –Ω–æ–≥–∞–º–∏',
        'Leg Extension': '–†–∞–∑–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥',
        'Leg Curl': '–°–≥–∏–±–∞–Ω–∏–µ –Ω–æ–≥',
        'Lunge': '–í—ã–ø–∞–¥—ã',
        'Romanian Deadlift': '–†—É–º—ã–Ω—Å–∫–∞—è —Ç—è–≥–∞',
        'Calf Raise': '–ü–æ–¥—ä—ë–º –Ω–∞ –Ω–æ—Å–∫–∏',
        
        # –ü–ª–µ—á–∏
        'Shoulder Press': '–ñ–∏–º –ø–ª–µ—á–∞–º–∏',
        'Military Press': '–ê—Ä–º–µ–π—Å–∫–∏–π –∂–∏–º',
        'Dumbbell Shoulder Press': '–ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π',
        'Lateral Raise': '–ú–∞—Ö–∏ –≤ —Å—Ç–æ—Ä–æ–Ω—ã',
        'Front Raise': '–ú–∞—Ö–∏ –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π',
        'Rear Delt Fly': '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ –≤ –Ω–∞–∫–ª–æ–Ω–µ',
        'Upright Row': '–¢—è–≥–∞ –∫ –ø–æ–¥–±–æ—Ä–æ–¥–∫—É',
        'Shrug': '–®—Ä–∞–≥–∏',
        
        # –†—É–∫–∏
        'Barbell Curl': '–ü–æ–¥—ä—ë–º —à—Ç–∞–Ω–≥–∏ –Ω–∞ –±–∏—Ü–µ–ø—Å',
        'Dumbbell Curl': '–ü–æ–¥—ä—ë–º –≥–∞–Ω—Ç–µ–ª–µ–π –Ω–∞ –±–∏—Ü–µ–ø—Å',
        'Hammer Curl': '–ú–æ–ª–æ—Ç–∫–æ–≤—ã–µ —Å–≥–∏–±–∞–Ω–∏—è',
        'Preacher Curl': '–°–≥–∏–±–∞–Ω–∏—è –Ω–∞ —Å–∫–∞–º—å–µ –°–∫–æ—Ç—Ç–∞',
        'Tricep Dip': '–û—Ç–∂–∏–º–∞–Ω–∏—è –Ω–∞ –±—Ä—É—Å—å—è—Ö',
        'Tricep Extension': '–†–∞–∑–≥–∏–±–∞–Ω–∏—è –Ω–∞ —Ç—Ä–∏—Ü–µ–ø—Å',
        'Skull Crusher': '–§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º',
        'Close-Grip Bench Press': '–ñ–∏–º —É–∑–∫–∏–º —Ö–≤–∞—Ç–æ–º',
        
        # –ü—Ä–µ—Å—Å
        'Crunch': '–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è',
        'Sit-Up': '–ü–æ–¥—ä—ë–º –∫–æ—Ä–ø—É—Å–∞',
        'Plank': '–ü–ª–∞–Ω–∫–∞',
        'Russian Twist': '–†—É—Å—Å–∫–∏–µ —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏—è',
        'Leg Raise': '–ü–æ–¥—ä—ë–º –Ω–æ–≥',
        'Mountain Climber': '–ê–ª—å–ø–∏–Ω–∏—Å—Ç',
        'Ab Wheel': '–†–æ–ª–∏–∫ –¥–ª—è –ø—Ä–µ—Å—Å–∞',
    }
    
    # –¢–µ—Ä–º–∏–Ω—ã –¥–ª—è –∑–∞–º–µ–Ω—ã –≤ –Ω–∞–∑–≤–∞–Ω–∏—è—Ö
    TERMS_TRANSLATION = {
        'Barbell': '–®—Ç–∞–Ω–≥–∞',
        'Dumbbell': '–ì–∞–Ω—Ç–µ–ª–∏',
        'Cable': '–ë–ª–æ–∫',
        'Machine': '–¢—Ä–µ–Ω–∞–∂—ë—Ä',
        'Incline': '–ù–∞–∫–ª–æ–Ω',
        'Decline': '–û–±—Ä–∞—Ç–Ω—ã–π –Ω–∞–∫–ª–æ–Ω',
        'Flat': '–ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è',
        'Press': '–ñ–∏–º',
        'Curl': '–°–≥–∏–±–∞–Ω–∏–µ',
        'Extension': '–†–∞–∑–≥–∏–±–∞–Ω–∏–µ',
        'Raise': '–ü–æ–¥—ä—ë–º',
        'Pull': '–¢—è–≥–∞',
        'Push': '–ñ–∏–º',
        'Squat': '–ü—Ä–∏—Å–µ–¥–∞–Ω–∏–µ',
        'Lunge': '–í—ã–ø–∞–¥',
        'Row': '–¢—è–≥–∞',
        'Fly': '–†–∞–∑–≤–µ–¥–µ–Ω–∏–µ',
        'Crunch': '–°–∫—Ä—É—á–∏–≤–∞–Ω–∏–µ',
    }
    
    CATEGORY_MAPPING = {
        'strength': 'physical',
        'stretching': 'physical',
        'plyometrics': 'physical',
        'strongman': 'physical',
        'powerlifting': 'physical',
        'cardio': 'physical',
        'olympic weightlifting': 'physical',
        'crossfit': 'physical',
        'weighted bodyweight': 'physical',
        'assisted bodyweight': 'physical',
    }
    
    LEVEL_MAPPING = {
        'beginner': 'beginner',
        'intermediate': 'intermediate',
        'expert': 'advanced',
    }
    
    EQUIPMENT_TRANSLATION = {
        'barbell': '—à—Ç–∞–Ω–≥–∞',
        'dumbbell': '–≥–∞–Ω—Ç–µ–ª–∏',
        'body only': '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
        'machine': '—Ç—Ä–µ–Ω–∞–∂—ë—Ä',
        'cable': '–±–ª–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä',
        'kettlebells': '–≥–∏—Ä–∏',
        'bands': '—Ä–µ–∑–∏–Ω–æ–≤—ã–µ –ª–µ–Ω—Ç—ã',
        'medicine ball': '–º–µ–¥–±–æ–ª',
        'exercise ball': '—Ñ–∏—Ç–±–æ–ª',
        'foam roll': '–º–∞—Å—Å–∞–∂–Ω—ã–π —Ä–æ–ª–∏–∫',
        'e-z curl bar': 'EZ-–≥—Ä–∏—Ñ',
    }
    
    MUSCLE_TRANSLATION = {
        'abdominals': '–ø—Ä–µ—Å—Å',
        'hamstrings': '–±–∏—Ü–µ–ø—Å –±–µ–¥—Ä–∞',
        'calves': '–∏–∫—Ä—ã',
        'shoulders': '–ø–ª–µ—á–∏',
        'adductors': '–ø—Ä–∏–≤–æ–¥—è—â–∏–µ',
        'glutes': '—è–≥–æ–¥–∏—Ü—ã',
        'quadriceps': '–∫–≤–∞–¥—Ä–∏—Ü–µ–ø—Å',
        'biceps': '–±–∏—Ü–µ–ø—Å',
        'forearms': '–ø—Ä–µ–¥–ø–ª–µ—á—å—è',
        'abductors': '–æ—Ç–≤–æ–¥—è—â–∏–µ',
        'triceps': '—Ç—Ä–∏—Ü–µ–ø—Å',
        'chest': '–≥—Ä—É–¥—å',
        'lower back': '–ø–æ—è—Å–Ω–∏—Ü–∞',
        'traps': '—Ç—Ä–∞–ø–µ—Ü–∏–∏',
        'middle back': '—Å—Ä–µ–¥–Ω—è—è —Å–ø–∏–Ω–∞',
        'lats': '—à–∏—Ä–æ—á–∞–π—à–∏–µ',
        'neck': '—à–µ—è',
    }
    
    def __init__(self):
        self.exercises = []
    
    def simple_translate(self, name: str) -> str:
        """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–ª–æ–≤–∞—Ä—è"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
        if name in self.EXERCISE_NAMES:
            return self.EXERCISE_NAMES[name]
        
        # –ü—Ä–æ–±—É–µ–º –∑–∞–º–µ–Ω–∏—Ç—å –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã
        translated = name
        for en, ru in self.TERMS_TRANSLATION.items():
            if en in translated:
                translated = translated.replace(en, ru)
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ –∏–∑–º–µ–Ω–∏–ª—Å—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
        if translated != name:
            return translated
        
        # –ò–Ω–∞—á–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª (–º–æ–∂–Ω–æ –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∑–∂–µ)
        return name
    
    def fetch_exercise_list(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
        
        try:
            response = requests.get(self.GITHUB_API, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            folders = [item['name'] for item in data if item['type'] == 'dir']
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(folders)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
            return folders
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return []
    
    def fetch_exercise_data(self, folder_name: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        url = f"{self.RAW_BASE_URL}/{folder_name}/exercise.json"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ {folder_name}: {e}")
            return None
    
    def adapt_exercise(self, raw_data: Dict) -> Dict:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É"""
        name = raw_data.get('name', 'Unknown')
        name_ru = self.simple_translate(name)
        
        category = self.CATEGORY_MAPPING.get(
            raw_data.get('category', 'strength').lower(),
            'physical'
        )
        
        difficulty = self.LEVEL_MAPPING.get(
            raw_data.get('level', 'beginner').lower(),
            'beginner'
        )
        
        instructions = raw_data.get('instructions', [])
        instructions_text = '\n'.join([f"{i+1}. {instr}" for i, instr in enumerate(instructions)])
        
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º—ã—à—Ü–∞—Ö
        primary_muscles = raw_data.get('primaryMuscles', [])
        secondary_muscles = raw_data.get('secondaryMuscles', [])
        equipment = raw_data.get('equipment', '')
        
        description_parts = []
        
        if primary_muscles:
            muscles_ru = [self.MUSCLE_TRANSLATION.get(m, m) for m in primary_muscles]
            description_parts.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ –º—ã—à—Ü—ã: {', '.join(muscles_ru)}")
        
        if secondary_muscles:
            muscles_ru = [self.MUSCLE_TRANSLATION.get(m, m) for m in secondary_muscles]
            description_parts.append(f"–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ: {', '.join(muscles_ru)}")
        
        if equipment:
            equipment_ru = self.EQUIPMENT_TRANSLATION.get(equipment.lower(), equipment)
            description_parts.append(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment_ru}")
        
        description = '\n'.join(description_parts)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª–∏–∞—Å—ã
        aliases = raw_data.get('aliases', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        if name != name_ru:
            aliases.insert(0, name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
        if equipment:
            equipment_ru = self.EQUIPMENT_TRANSLATION.get(equipment.lower(), equipment)
            aliases.append(f"{name_ru} ({equipment_ru})")
        
        return {
            'model': 'authentication.exercise',
            'pk': None,
            'fields': {
                'name': name_ru,
                'description': description,
                'category': category,
                'difficulty': difficulty,
                'duration_min': None,
                'duration_max': None,
                'repetitions': None,
                'instructions': instructions_text,
                'audio_url': None,
                'video_url': None,
                'is_active': True,
                'usage_count': 0,
            },
            'aliases': list(set(aliases))[:15]  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ, –º–∞–∫—Å–∏–º—É–º 15
        }
    
    def parse_all(self, limit: Optional[int] = None) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        folders = self.fetch_exercise_list()
        
        if limit:
            folders = folders[:limit]
            print(f"‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limit} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        
        print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(folders)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...\n")
        
        for i, folder in enumerate(folders, 1):
            print(f"[{i}/{len(folders)}] {folder}...", end=' ')
            
            raw_data = self.fetch_exercise_data(folder)
            if raw_data:
                exercise = self.adapt_exercise(raw_data)
                self.exercises.append(exercise)
                print(f"‚úì {exercise['fields']['name']}")
            else:
                print("‚úó")
            
            time.sleep(0.2)  # –ó–∞–¥–µ—Ä–∂–∫–∞
        
        print(f"\n‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.exercises)}")
        return self.exercises
    
    def save_to_fixture(self, filename: str = 'gym_exercises.json'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        output_path = os.path.join(base_dir, 'authentication/fixtures', filename)
        
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        fixture_data = []
        aliases_data = {}
        
        for exercise in self.exercises:
            aliases = exercise.pop('aliases', [])
            fixture_data.append(exercise)
            aliases_data[exercise['fields']['name']] = aliases
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(fixture_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {output_path}")
        
        # –ê–ª–∏–∞—Å—ã
        aliases_path = output_path.replace('.json', '_aliases.json')
        with open(aliases_path, 'w', encoding='utf-8') as f:
            json.dump(aliases_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –ê–ª–∏–∞—Å—ã: {aliases_path}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(fixture_data)}")
        print(f"   –í—Å–µ–≥–æ –∞–ª–∏–∞—Å–æ–≤: {sum(len(a) for a in aliases_data.values())}")
        
        return output_path, aliases_path


def main():
    print("=" * 70)
    print("üèãÔ∏è  –ü–ê–†–°–ï–† –£–ü–†–ê–ñ–ù–ï–ù–ò–ô (—É–ø—Ä–æ—â—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("=" * 70)
    
    parser = SimpleExerciseParser()
    
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("  1) –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (~800+)")
    print("  2) –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (50 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)")
    print("  3) –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    
    choice = input("\n–í—ã–±–æ—Ä [1/2/3]: ").strip()
    
    limit = None
    if choice == '2':
        limit = 50
    elif choice == '3':
        try:
            limit = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: "))
        except:
            limit = 50
    
    exercises = parser.parse_all(limit=limit)
    
    if exercises:
        parser.save_to_fixture()
        
        print("\n" + "=" * 70)
        print("‚úÖ –ì–û–¢–û–í–û!")
        print("=" * 70)
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. python manage.py loaddata authentication/fixtures/gym_exercises.json")
        print("  2. python manage.py load_gym_aliases")
        print()


if __name__ == '__main__':
    main()
