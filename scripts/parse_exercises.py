"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è wrkout/exercises.json
–∏ –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –ø–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—É Django –º–æ–¥–µ–ª–∏ Exercise

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python scripts/parse_exercises.py

–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:
    pip install requests googletrans==4.0.0rc1
"""

import json
import os
import sys
import requests
from typing import Dict, List, Optional
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ Django –ø—Ä–æ–µ–∫—Ç—É
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')

# –î–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
try:
    from googletrans import Translator
    TRANSLATOR_AVAILABLE = True
except ImportError:
    print("‚ö†Ô∏è  googletrans –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ: pip install googletrans==4.0.0rc1")
    TRANSLATOR_AVAILABLE = False


class ExerciseParser:
    """–ü–∞—Ä—Å–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ wrkout/exercises.json"""
    
    # API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    GITHUB_API = "https://api.github.com/repos/wrkout/exercises.json/contents/exercises"
    RAW_BASE_URL = "https://raw.githubusercontent.com/wrkout/exercises.json/master/exercises"
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    CATEGORY_MAPPING = {
        'strength': 'physical',
        'stretching': 'physical',
        'plyometrics': 'physical',
        'strongman': 'physical',
        'powerlifting': 'physical',
        'cardio': 'physical',
        'olympic weightlifting': 'physical',
        'crossfit': 'physical',
        'weighted bodyweight': 'physical',
        'assisted bodyweight': 'physical',
    }
    
    # –ú–∞–ø–ø–∏–Ω–≥ —É—Ä–æ–≤–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    LEVEL_MAPPING = {
        'beginner': 'beginner',
        'intermediate': 'intermediate',
        'expert': 'advanced',
    }
    
    # –ü–µ—Ä–µ–≤–æ–¥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏—è
    EQUIPMENT_TRANSLATION = {
        'barbell': '—à—Ç–∞–Ω–≥–∞',
        'dumbbell': '–≥–∞–Ω—Ç–µ–ª–∏',
        'body only': '—Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
        'machine': '—Ç—Ä–µ–Ω–∞–∂—ë—Ä',
        'cable': '–±–ª–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä',
        'kettlebells': '–≥–∏—Ä–∏',
        'bands': '—Ä–µ–∑–∏–Ω–æ–≤—ã–µ –ª–µ–Ω—Ç—ã',
        'medicine ball': '–º–µ–¥–±–æ–ª',
        'exercise ball': '—Ñ–∏—Ç–±–æ–ª',
        'foam roll': '–º–∞—Å—Å–∞–∂–Ω—ã–π —Ä–æ–ª–∏–∫',
        'e-z curl bar': 'EZ-–≥—Ä–∏—Ñ',
    }
    
    # –ü–µ—Ä–µ–≤–æ–¥ –≥—Ä—É–ø–ø –º—ã—à—Ü
    MUSCLE_TRANSLATION = {
        'abdominals': '–ø—Ä–µ—Å—Å',
        'hamstrings': '–±–∏—Ü–µ–ø—Å –±–µ–¥—Ä–∞',
        'calves': '–∏–∫—Ä—ã',
        'shoulders': '–ø–ª–µ—á–∏',
        'adductors': '–ø—Ä–∏–≤–æ–¥—è—â–∏–µ –º—ã—à—Ü—ã',
        'glutes': '—è–≥–æ–¥–∏—Ü—ã',
        'quadriceps': '–∫–≤–∞–¥—Ä–∏—Ü–µ–ø—Å',
        'biceps': '–±–∏—Ü–µ–ø—Å',
        'forearms': '–ø—Ä–µ–¥–ø–ª–µ—á—å—è',
        'abductors': '–æ—Ç–≤–æ–¥—è—â–∏–µ –º—ã—à—Ü—ã',
        'triceps': '—Ç—Ä–∏—Ü–µ–ø—Å',
        'chest': '–≥—Ä—É–¥—å',
        'lower back': '–Ω–∏–∂–Ω—è—è —á–∞—Å—Ç—å —Å–ø–∏–Ω—ã',
        'traps': '—Ç—Ä–∞–ø–µ—Ü–∏–∏',
        'middle back': '—Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å–ø–∏–Ω—ã',
        'lats': '—à–∏—Ä–æ—á–∞–π—à–∏–µ',
        'neck': '—à–µ—è',
    }
    
    def __init__(self):
        self.translator = Translator() if TRANSLATOR_AVAILABLE else None
        self.exercises = []
        self.translation_cache = {}
    
    def translate_text(self, text: str, max_retries=3) -> str:
        """–ü–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º Google Translate"""
        if not self.translator or not text:
            return text
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if text in self.translation_cache:
            return self.translation_cache[text]
        
        for attempt in range(max_retries):
            try:
                result = self.translator.translate(text, src='en', dest='ru')
                translated = result.text
                self.translation_cache[text] = translated
                time.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limit
                return translated
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ '{text}': {e}")
                if attempt < max_retries - 1:
                    time.sleep(2)
                    continue
                return text
        
        return text
    
    def fetch_exercise_list(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫ —Å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è–º–∏ –∏–∑ GitHub API"""
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ GitHub...")
        
        try:
            response = requests.get(self.GITHUB_API)
            response.raise_for_status()
            data = response.json()
            
            # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –ø–∞–ø–∫–∏ (—É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è)
            folders = [item['name'] for item in data if item['type'] == 'dir']
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(folders)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
            return folders
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞: {e}")
            return []
    
    def fetch_exercise_data(self, folder_name: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        url = f"{self.RAW_BASE_URL}/{folder_name}/exercise.json"
        
        try:
            response = requests.get(url)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å {folder_name}: {e}")
            return None
    
    def adapt_exercise(self, raw_data: Dict, index: int) -> Dict:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –ø–æ–¥ –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É Django"""
        
        # –ë–∞–∑–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
        name = raw_data.get('name', 'Unknown Exercise')
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ
        name_ru = self.translate_text(name) if self.translator else name
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category = self.CATEGORY_MAPPING.get(
            raw_data.get('category', 'strength').lower(),
            'physical'
        )
        
        # –°–ª–æ–∂–Ω–æ—Å—Ç—å
        difficulty = self.LEVEL_MAPPING.get(
            raw_data.get('level', 'beginner').lower(),
            'beginner'
        )
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        instructions = raw_data.get('instructions', [])
        instructions_text = '\n'.join([f"{i+1}. {instr}" for i, instr in enumerate(instructions)])
        
        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏
        if self.translator and instructions_text:
            instructions_ru = self.translate_text(instructions_text)
        else:
            instructions_ru = instructions_text
        
        # –û–ø–∏—Å–∞–Ω–∏–µ
        description = raw_data.get('description', '')
        if self.translator and description:
            description_ru = self.translate_text(description)
        else:
            description_ru = description
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º—ã—à—Ü–∞—Ö
        primary_muscles = raw_data.get('primaryMuscles', [])
        secondary_muscles = raw_data.get('secondaryMuscles', [])
        equipment = raw_data.get('equipment', '')
        
        muscles_info = []
        if primary_muscles:
            muscles_ru = [self.MUSCLE_TRANSLATION.get(m, m) for m in primary_muscles]
            muscles_info.append(f"–û—Å–Ω–æ–≤–Ω—ã–µ –º—ã—à—Ü—ã: {', '.join(muscles_ru)}")
        
        if secondary_muscles:
            muscles_ru = [self.MUSCLE_TRANSLATION.get(m, m) for m in secondary_muscles]
            muscles_info.append(f"–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º—ã—à—Ü—ã: {', '.join(muscles_ru)}")
        
        if equipment:
            equipment_ru = self.EQUIPMENT_TRANSLATION.get(equipment.lower(), equipment)
            muscles_info.append(f"–û–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ: {equipment_ru}")
        
        full_description = description_ru
        if muscles_info:
            full_description += '\n\n' + '\n'.join(muscles_info) if full_description else '\n'.join(muscles_info)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª–∏–∞—Å—ã
        aliases = raw_data.get('aliases', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∞–Ω–≥–ª–∏–π—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–∫ –∞–ª–∏–∞—Å
        if name.lower() != name_ru.lower():
            aliases.insert(0, name)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
        if equipment:
            equipment_ru = self.EQUIPMENT_TRANSLATION.get(equipment.lower(), equipment)
            # –£–¥–∞–ª—è–µ–º –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –µ—Å–ª–∏ –æ–Ω–æ —Ç–∞–º –µ—Å—Ç—å
            name_without_equipment = name_ru
            for eq in ['(–®—Ç–∞–Ω–≥–∞)', '(–ì–∞–Ω—Ç–µ–ª–∏)', '(–¢—Ä–µ–Ω–∞–∂—ë—Ä)', '(–ë–ª–æ–∫)']:
                name_without_equipment = name_without_equipment.replace(eq, '').strip()
            
            if equipment_ru not in name_ru.lower():
                aliases.append(f"{name_without_equipment} {equipment_ru}")
                aliases.append(f"{name_without_equipment} –Ω–∞ {equipment_ru}")
        
        return {
            'model': 'authentication.exercise',
            'pk': None,  # Django –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞—Å—Ç UUID
            'fields': {
                'name': name_ru,
                'description': full_description[:500] if full_description else '',  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
                'category': category,
                'difficulty': difficulty,
                'duration_min': None,
                'duration_max': None,
                'repetitions': None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∏–∑ instructions
                'instructions': instructions_ru,
                'audio_url': None,
                'video_url': None,
                'is_active': True,
                'usage_count': 0,
            },
            'aliases': aliases[:10]  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–ª–∏–∞—Å–æ–≤
        }
    
    def parse_all(self, limit: Optional[int] = None) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        folders = self.fetch_exercise_list()
        
        if limit:
            folders = folders[:limit]
            print(f"‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–æ–ª—å–∫–æ {limit} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        
        print(f"\nüîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ {len(folders)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
        
        for i, folder in enumerate(folders, 1):
            print(f"[{i}/{len(folders)}] –û–±—Ä–∞–±–æ—Ç–∫–∞: {folder}...", end=' ')
            
            raw_data = self.fetch_exercise_data(folder)
            if raw_data:
                exercise = self.adapt_exercise(raw_data, i)
                self.exercises.append(exercise)
                print("‚úì")
            else:
                print("‚úó")
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è rate limiting
            time.sleep(0.3)
        
        print(f"\n‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {len(self.exercises)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        return self.exercises
    
    def save_to_fixture(self, filename: str = 'gym_exercises.json'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ Django fixture —Ñ–æ—Ä–º–∞—Ç"""
        output_path = os.path.join(
            os.path.dirname(os.path.dirname(__file__)),
            'authentication/fixtures',
            filename
        )
        
        # –°–æ–∑–¥–∞—ë–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–±–µ–∑ –∞–ª–∏–∞—Å–æ–≤, –æ–Ω–∏ –±—É–¥—É—Ç –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Ñ–∞–π–ª–µ)
        fixture_data = []
        aliases_data = {}
        
        for exercise in self.exercises:
            aliases = exercise.pop('aliases', [])
            fixture_data.append(exercise)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–∏–∞—Å—ã –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
            exercise_name = exercise['fields']['name']
            aliases_data[exercise_name] = aliases
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(fixture_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {output_path}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞–ª–∏–∞—Å—ã –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª
        aliases_path = output_path.replace('.json', '_aliases.json')
        with open(aliases_path, 'w', encoding='utf-8') as f:
            json.dump(aliases_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –ê–ª–∏–∞—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤: {aliases_path}")
        
        return output_path, aliases_path
    
    def generate_alias_command(self, aliases_file: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞–ª–∏–∞—Å–æ–≤"""
        command_path = os.path.join(
            os.path.dirname(os.path.dirname(__file__)),
            'authentication/management/commands/load_gym_aliases.py'
        )
        
        command_code = f'''"""
Management –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–∏–∞—Å–æ–≤ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ —Ñ–∞–π–ª–∞
–ó–∞–ø—É—Å—Ç–∏—Ç—å: python manage.py load_gym_aliases
"""

from django.core.management.base import BaseCommand
from authentication.models import Exercise, ExerciseAlias
import json
import os


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∞–ª–∏–∞—Å—ã –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ JSON —Ñ–∞–π–ª–∞'
    
    def handle(self, *args, **options):
        aliases_file = os.path.join(
            os.path.dirname(os.path.dirname(os.path.dirname(__file__))),
            'fixtures/gym_exercises_aliases.json'
        )
        
        if not os.path.exists(aliases_file):
            self.stdout.write(self.style.ERROR(f'–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {{aliases_file}}'))
            return
        
        with open(aliases_file, 'r', encoding='utf-8') as f:
            aliases_data = json.load(f)
        
        self.stdout.write('–ó–∞–≥—Ä—É–∑–∫–∞ –∞–ª–∏–∞—Å–æ–≤ –¥–ª—è —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...')
        
        added_count = 0
        skipped_count = 0
        
        for exercise_name, aliases in aliases_data.items():
            try:
                exercise = Exercise.objects.get(name=exercise_name, is_active=True)
                
                for alias in aliases:
                    if not alias or not alias.strip():
                        continue
                    
                    alias = alias.strip()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–π –∞–ª–∏–∞—Å
                    if not ExerciseAlias.objects.filter(exercise=exercise, alias__iexact=alias).exists():
                        ExerciseAlias.objects.create(
                            exercise=exercise,
                            alias=alias,
                            match_count=0
                        )
                        added_count += 1
                        self.stdout.write(f'  ‚úì –î–æ–±–∞–≤–ª–µ–Ω –∞–ª–∏–∞—Å "{{alias}}" –¥–ª—è "{{exercise_name}}"')
                    else:
                        skipped_count += 1
                        
            except Exercise.DoesNotExist:
                self.stdout.write(
                    self.style.WARNING(f'  ‚ö† –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ "{{exercise_name}}" –Ω–µ –Ω–∞–π–¥–µ–Ω–æ')
                )
        
        self.stdout.write(
            self.style.SUCCESS(f'\\n–ì–æ—Ç–æ–≤–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ: {{added_count}}, –ü—Ä–æ–ø—É—â–µ–Ω–æ: {{skipped_count}}')
        )
'''
        
        with open(command_path, 'w', encoding='utf-8') as f:
            f.write(command_code)
        
        print(f"üíæ –ö–æ–º–∞–Ω–¥–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–∏–∞—Å–æ–≤: {command_path}")


def main():
    print("=" * 60)
    print("üèãÔ∏è  –ü–∞—Ä—Å–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ wrkout/exercises.json")
    print("=" * 60)
    
    parser = ExerciseParser()
    
    # –°–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ª–∏–º–∏—Ç–µ
    print("\n–°–∫–æ–ª—å–∫–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å?")
    print("  1) –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (–º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è)")
    print("  2) –û–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–¥–ª—è —Ç–µ—Å—Ç–∞)")
    
    choice = input("\n–í—ã–±–æ—Ä [1/2]: ").strip()
    
    limit = None
    if choice == '2':
        limit_str = input("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 50): ").strip()
        try:
            limit = int(limit_str)
        except ValueError:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥, –∏—Å–ø–æ–ª—å–∑—É–µ–º 50 –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            limit = 50
    
    # –ü–∞—Ä—Å–∏–º
    exercises = parser.parse_all(limit=limit)
    
    if not exercises:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    fixture_path, aliases_path = parser.save_to_fixture()
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∞–ª–∏–∞—Å–æ–≤
    parser.generate_alias_command(aliases_path)
    
    print("\n" + "=" * 60)
    print("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∑–∞–≤–µ—Ä—à—ë–Ω!")
    print("=" * 60)
    print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
    print("  1. python manage.py loaddata authentication/fixtures/gym_exercises.json")
    print("  2. python manage.py load_gym_aliases")
    print("\n")


if __name__ == '__main__':
    main()
