#!/usr/bin/env python3
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å rate limiting –¥–ª—è Yandex Translate API
–õ–∏–º–∏—Ç: 20 –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (–∏—Å–ø–æ–ª—å–∑—É–µ–º 15 –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
"""

import os
import sys
import django
import asyncio
import aiohttp
import json
import time
from pathlib import Path
from typing import List, Dict, Optional
from datetime import datetime
from collections import deque

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).resolve().parent.parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from authentication.models import Exercise
from django.conf import settings
from asgiref.sync import sync_to_async


class RateLimiter:
    """Rate limiter —Å sliding window"""
    
    def __init__(self, max_requests: int, time_window: float = 1.0):
        """
        Args:
            max_requests: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø—Ä–æ—Å–æ–≤
            time_window: –í—Ä–µ–º–µ–Ω–Ω–æ–µ –æ–∫–Ω–æ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —Å–µ–∫—É–Ω–¥–∞)
        """
        self.max_requests = max_requests
        self.time_window = time_window
        self.requests = deque()
        self.lock = asyncio.Lock()
    
    async def acquire(self):
        """–û–∂–∏–¥–∞–Ω–∏–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞"""
        async with self.lock:
            now = time.time()
            
            # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã –∑–∞ –ø—Ä–µ–¥–µ–ª–∞–º–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –æ–∫–Ω–∞
            while self.requests and self.requests[0] < now - self.time_window:
                self.requests.popleft()
            
            # –ï—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞, –∂–¥—ë–º
            if len(self.requests) >= self.max_requests:
                # –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è = –≤—Ä–µ–º—è –¥–æ –≤—ã—Ö–æ–¥–∞ —Å–∞–º–æ–≥–æ —Å—Ç–∞—Ä–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ –æ–∫–Ω–∞
                sleep_time = self.requests[0] + self.time_window - now + 0.01
                if sleep_time > 0:
                    await asyncio.sleep(sleep_time)
                    # –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É
                    await self.acquire()
                    return
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –∑–∞–ø—Ä–æ—Å
            self.requests.append(now)


class YandexTranslatorWithRateLimit:
    """–ü–µ—Ä–µ–≤–æ–¥—á–∏–∫ Yandex —Å rate limiting"""
    
    def __init__(self, api_key: str, folder_id: str, requests_per_second: int = 15):
        self.api_key = api_key
        self.folder_id = folder_id
        self.base_url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
        self.session: Optional[aiohttp.ClientSession] = None
        
        # Rate limiter (15 req/s –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏, –ª–∏–º–∏—Ç 20 req/s)
        self.rate_limiter = RateLimiter(max_requests=requests_per_second, time_window=1.0)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total = 0
        self.translated = 0
        self.errors = 0
        self.skipped = 0
        self.start_time = None
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        self.start_time = time.time()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def _request_with_retries(
        self, 
        text: str, 
        source_lang: str = 'en', 
        target_lang: str = 'ru',
        max_retries: int = 3
    ) -> Optional[str]:
        """–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å —Å retry –∏ exponential backoff"""
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Api-Key {self.api_key}'
        }
        
        payload = {
            'folderId': self.folder_id,
            'texts': [text],
            'sourceLanguageCode': source_lang,
            'targetLanguageCode': target_lang
        }
        
        for attempt in range(1, max_retries + 1):
            try:
                # –ñ–¥—ë–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –æ—Ç rate limiter
                await self.rate_limiter.acquire()
                
                async with self.session.post(self.base_url, headers=headers, json=payload, timeout=10) as response:
                    if response.status == 200:
                        data = await response.json()
                        translations = data.get('translations', [])
                        if translations:
                            return translations[0].get('text')
                    
                    elif response.status == 429:  # Too Many Requests
                        retry_after = int(response.headers.get('Retry-After', 2))
                        print(f"   ‚è≥ Rate limit (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}), –∂–¥—ë–º {retry_after}s...")
                        await asyncio.sleep(retry_after)
                        continue
                    
                    else:
                        error_text = await response.text()
                        print(f"   ‚ùå –û—à–∏–±–∫–∞ {response.status} (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}): {error_text[:100]}")
                        
                        if attempt < max_retries:
                            backoff = 2 ** (attempt - 1)  # 1s, 2s, 4s
                            await asyncio.sleep(backoff)
                            continue
                        
                        return None
            
            except asyncio.TimeoutError:
                print(f"   ‚è±Ô∏è  Timeout (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries})")
                if attempt < max_retries:
                    await asyncio.sleep(2 ** (attempt - 1))
                    continue
                return None
            
            except Exception as e:
                print(f"   ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/{max_retries}): {e}")
                if attempt < max_retries:
                    await asyncio.sleep(2 ** (attempt - 1))
                    continue
                return None
        
        return None
    
    async def translate_text(self, text: str, source_lang: str = 'en', target_lang: str = 'ru') -> Optional[str]:
        """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç"""
        if not self.session:
            raise RuntimeError("Session not initialized. Use 'async with' context manager")
        
        return await self._request_with_retries(text, source_lang, target_lang)
    
    def print_stats(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        elapsed = time.time() - self.start_time if self.start_time else 0
        rate = self.translated / elapsed if elapsed > 0 else 0
        
        print("\n" + "="*70)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–í–û–î–ê")
        print("="*70)
        print(f"–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {self.total}")
        print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {self.translated}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥): {self.skipped}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.errors}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed:.1f}s")
        print(f"üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {rate:.2f} –ø–µ—Ä–µ–≤–æ–¥–æ–≤/—Å–µ–∫")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.translated / max(self.total - self.skipped, 1) * 100):.1f}%")
        print("="*70)


async def translate_exercises(
    api_key: str,
    folder_id: str,
    requests_per_second: int = 15,
    batch_size: int = 100,
    skip_existing: bool = True,
    dry_run: bool = False
):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å rate limiting
    
    Args:
        api_key: API –∫–ª—é—á Yandex Cloud
        folder_id: ID –ø–∞–ø–∫–∏ –≤ Yandex Cloud
        requests_per_second: –õ–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 15)
        batch_size: –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100)
        skip_existing: –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º
        dry_run: –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    
    # –ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
    if skip_existing:
        qs = Exercise.objects.filter(name_ru='')
    else:
        qs = Exercise.objects.all()

    exercises = await sync_to_async(list)(qs)
    total_count = len(exercises)
    
    if total_count == 0:
        print("‚úÖ –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!")
        return
    
    print("="*70)
    print("üåê YANDEX TRANSLATE - –ê–°–ò–ù–•–†–û–ù–ù–´–ô –ü–ï–†–ï–í–û–î –° RATE LIMITING")
    print("="*70)
    print(f"üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {total_count}")
    print(f"üö¶ Rate limit: {requests_per_second} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
    print(f"üíæ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {batch_size}")
    print(f"üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {'–î–∞' if dry_run else '–ù–µ—Ç'}")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö: {'–î–∞' if skip_existing else '–ù–µ—Ç'}")
    print("="*70 + "\n")
    
    async with YandexTranslatorWithRateLimit(api_key, folder_id, requests_per_second) as translator:
        translator.total = total_count
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ–º—ã–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–æ–º
        semaphore = asyncio.Semaphore(10)  # –ú–∞–∫—Å–∏–º—É–º 10 –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        save_batch = []
        save_lock = asyncio.Lock()
        
        async def translate_exercise(exercise: Exercise, index: int):
            """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –±–∞—Ç—á–∞–º–∏"""
            nonlocal save_batch
            
            async with semaphore:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥
                if skip_existing and exercise.name_ru:
                    translator.skipped += 1
                    return None
                
                translation = await translator.translate_text(exercise.name)
                
                if translation:
                    translator.translated += 1
                    print(f"   [{index+1}/{total_count}] ‚úÖ {exercise.name[:40]:<40} ‚Üí {translation[:40]}")
                    
                    exercise.name_ru = translation
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –±–∞—Ç—á–∞–º–∏ —Å—Ä–∞–∑—É –∂–µ
                    if not dry_run:
                        async with save_lock:
                            save_batch.append(exercise)
                            
                            # –ö–æ–≥–¥–∞ –Ω–∞–±—Ä–∞–ª–∏ batch_size - —Å–æ—Ö—Ä–∞–Ω—è–µ–º
                            if len(save_batch) >= batch_size:
                                await sync_to_async(Exercise.objects.bulk_update)(save_batch, ['name_ru'])
                                print(f"   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {translator.translated} –ø–µ—Ä–µ–≤–æ–¥–æ–≤")
                                save_batch = []
                    
                    return (exercise, translation)
                else:
                    translator.errors += 1
                    print(f"   [{index+1}/{total_count}] ‚ùå {exercise.name[:60]}")
                    return None
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤—Å–µ –ø–µ—Ä–µ–≤–æ–¥—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ (—Å –∫–æ–Ω—Ç—Ä–æ–ª–µ–º —á–µ—Ä–µ–∑ semaphore –∏ rate_limiter)
        tasks = [translate_exercise(ex, i) for i, ex in enumerate(exercises)]
        results = await asyncio.gather(*tasks, return_exceptions=True)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –±–∞—Ç—á–∞
        if save_batch and not dry_run:
            print(f"\nüíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –±–∞—Ç—á ({len(save_batch)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π)...")
            await sync_to_async(Exercise.objects.bulk_update)(save_batch, ['name_ru'])
            print(f"   ‚úÖ –ò—Ç–æ–≥–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {translator.translated}")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        translator.print_stats()
        
        if dry_run:
            print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –±—ã–ª —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫. –ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")
        else:
            print(f"\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")


def load_credentials():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    api_key = os.getenv('YANDEX_TRANSLATE_API_KEY') or os.getenv('YANDEX_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    
    if not api_key or not folder_id:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ .env
        env_file = Path(__file__).parent.parent / '.env'
        if env_file.exists():
            with open(env_file) as f:
                for line in f:
                    line = line.strip()
                    if '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        value = value.strip('"\'')
                        if key == 'YANDEX_TRANSLATE_API_KEY' or key == 'YANDEX_API_KEY':
                            api_key = value
                        elif key == 'YANDEX_FOLDER_ID':
                            folder_id = value
    
    return api_key, folder_id


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å rate limiting',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ –Ω–µ–ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (15 req/s)
  python scripts/translate_exercises_with_rate_limit.py
  
  # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
  python scripts/translate_exercises_with_rate_limit.py --dry-run
  
  # –£–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ 18 req/s (–æ—Å—Ç–æ—Ä–æ–∂–Ω–æ!)
  python scripts/translate_exercises_with_rate_limit.py --rate-limit 18
  
  # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–Ω–æ–≤–æ (force)
  python scripts/translate_exercises_with_rate_limit.py --force
        """
    )
    
    parser.add_argument('--api-key', help='Yandex Cloud API –∫–ª—é—á')
    parser.add_argument('--folder-id', help='Yandex Cloud Folder ID')
    parser.add_argument('--rate-limit', type=int, default=15, help='–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (default: 15, max: 20)')
    parser.add_argument('--batch-size', type=int, default=100, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (default: 100)')
    parser.add_argument('--force', action='store_true', help='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ, –¥–∞–∂–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º')
    parser.add_argument('--dry-run', action='store_true', help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å credentials
    api_key = args.api_key
    folder_id = args.folder_id
    
    if not api_key or not folder_id:
        env_api_key, env_folder_id = load_credentials()
        api_key = api_key or env_api_key
        folder_id = folder_id or env_folder_id
    
    if not api_key or not folder_id:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á –∏ Folder ID:")
        print("   1. –ß–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: --api-key YOUR_KEY --folder-id YOUR_FOLDER_ID")
        print("   2. –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: YANDEX_API_KEY –∏ YANDEX_FOLDER_ID")
        print("   3. –ß–µ—Ä–µ–∑ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("\nüìñ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å credentials:")
        print("   https://cloud.yandex.ru/docs/translate/api-ref/authentication")
        sys.exit(1)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ rate limit
    if args.rate_limit > 20:
        print("‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –õ–∏–º–∏—Ç Yandex Translate - 20 req/s!")
        print(f"   –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {args.rate_limit} req/s")
        print("   –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è: 15-18 req/s –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏")
        response = input("   –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ")
        if response.lower() != 'y':
            sys.exit(0)
    
    # –ó–∞–ø—É—Å–∫
    try:
        await translate_exercises(
            api_key=api_key,
            folder_id=folder_id,
            requests_per_second=args.rate_limit,
            batch_size=args.batch_size,
            skip_existing=not args.force,
            dry_run=args.dry_run
        )
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(130)


if __name__ == '__main__':
    asyncio.run(main())
