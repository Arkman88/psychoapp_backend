#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π - –º–æ–∂–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç
"""

import os
import sys
import django
import time
import requests
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).resolve().parent.parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from authentication.models import Exercise
from django.conf import settings


class SimpleTranslator:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —Å rate limiting"""
    
    def __init__(self, api_key: str, folder_id: str, requests_per_second: int = 15):
        self.api_key = api_key
        self.folder_id = folder_id
        self.base_url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
        self.delay = 1.0 / requests_per_second  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        self.last_request_time = 0
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total = 0
        self.translated = 0
        self.errors = 0
        self.skipped = 0
        self.start_time = None
    
    def translate_text(self, text: str, source_lang: str = 'en', target_lang: str = 'ru') -> str:
        """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç"""
        # Rate limiting: –∂–¥—ë–º –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        now = time.time()
        time_since_last = now - self.last_request_time
        if time_since_last < self.delay:
            time.sleep(self.delay - time_since_last)
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Api-Key {self.api_key}'
        }
        
        payload = {
            'folderId': self.folder_id,
            'texts': [text],
            'sourceLanguageCode': source_lang,
            'targetLanguageCode': target_lang
        }
        
        for attempt in range(1, 4):  # 3 –ø–æ–ø—ã—Ç–∫–∏
            try:
                response = requests.post(
                    self.base_url,
                    headers=headers,
                    json=payload,
                    timeout=10
                )
                
                self.last_request_time = time.time()
                
                if response.status_code == 200:
                    data = response.json()
                    translations = data.get('translations', [])
                    if translations:
                        return translations[0].get('text')
                
                elif response.status_code == 429:  # Rate limit
                    retry_after = int(response.headers.get('Retry-After', 2))
                    print(f"      ‚è≥ Rate limit, –∂–¥—ë–º {retry_after}s...")
                    time.sleep(retry_after)
                    continue
                
                else:
                    print(f"      ‚ùå –û—à–∏–±–∫–∞ {response.status_code}: {response.text[:100]}")
                    if attempt < 3:
                        time.sleep(2 ** (attempt - 1))
                        continue
                    return None
            
            except requests.exceptions.Timeout:
                print(f"      ‚è±Ô∏è  Timeout (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/3)")
                if attempt < 3:
                    time.sleep(2)
                    continue
                return None
            
            except Exception as e:
                print(f"      ‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ: {e}")
                if attempt < 3:
                    time.sleep(2)
                    continue
                return None
        
        return None
    
    def print_stats(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        elapsed = time.time() - self.start_time if self.start_time else 0
        rate = self.translated / elapsed if elapsed > 0 else 0
        
        print("\n" + "="*70)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–í–û–î–ê")
        print("="*70)
        print(f"–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {self.total}")
        print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {self.translated}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥): {self.skipped}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.errors}")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {elapsed:.1f}s")
        print(f"üöÄ –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {rate:.2f} –ø–µ—Ä–µ–≤–æ–¥–æ–≤/—Å–µ–∫")
        print(f"üìà –ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.translated / max(self.total - self.skipped, 1) * 100):.1f}%")
        print("="*70)


def translate_exercises_simple(
    api_key: str,
    folder_id: str,
    requests_per_second: int = 15,
    skip_existing: bool = True
):
    """
    –ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º
    """
    
    # –ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
    if skip_existing:
        exercises = list(Exercise.objects.filter(name_ru='').order_by('id'))
    else:
        exercises = list(Exercise.objects.all().order_by('id'))
    
    total_count = len(exercises)
    
    if total_count == 0:
        print("‚úÖ –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!")
        return
    
    translator = SimpleTranslator(api_key, folder_id, requests_per_second)
    translator.total = total_count
    translator.start_time = time.time()
    
    print("="*70)
    print("üåê YANDEX TRANSLATE - –ü–û–°–õ–ï–î–û–í–ê–¢–ï–õ–¨–ù–´–ô –ü–ï–†–ï–í–û–î")
    print("="*70)
    print(f"üìù –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∫ –ø–µ—Ä–µ–≤–æ–¥—É: {total_count}")
    print(f"üö¶ Rate limit: {requests_per_second} –∑–∞–ø—Ä–æ—Å–æ–≤/—Å–µ–∫")
    print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ: –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞")
    print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—Å–∫ –ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã—Ö: {'–î–∞' if skip_existing else '–ù–µ—Ç'}")
    print(f"‚è±Ô∏è  –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ~{total_count / requests_per_second:.0f} —Å–µ–∫—É–Ω–¥")
    print("="*70 + "\n")
    
    try:
        for i, exercise in enumerate(exercises, 1):
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥
            if skip_existing and exercise.name_ru:
                translator.skipped += 1
                continue
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º
            translation = translator.translate_text(exercise.name)
            
            if translation:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
                exercise.name_ru = translation
                exercise.save()
                
                translator.translated += 1
                print(f"[{i}/{total_count}] ‚úÖ {exercise.name[:45]:<45} ‚Üí {translation[:45]}")
            else:
                translator.errors += 1
                print(f"[{i}/{total_count}] ‚ùå {exercise.name[:60]}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–∞–∂–¥—ã–µ 100 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
            if i % 100 == 0:
                elapsed = time.time() - translator.start_time
                rate = translator.translated / elapsed
                remaining = total_count - i
                eta = remaining / rate if rate > 0 else 0
                print(f"\n   üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {translator.translated}, –æ—à–∏–±–æ–∫ {translator.errors}")
                print(f"   ‚è±Ô∏è  ETA: ~{eta:.0f}s ({rate:.2f} –ø–µ—Ä–µ–≤–æ–¥–æ–≤/—Å–µ–∫)\n")
    
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º!")
        translator.print_stats()
        print("\nüí° –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—ë–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.")
        sys.exit(130)
    
    # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    translator.print_stats()
    print(f"\n‚úÖ –ü–µ—Ä–µ–≤–æ–¥—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!")


def load_credentials():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    api_key = os.getenv('YANDEX_TRANSLATE_API_KEY') or os.getenv('YANDEX_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    
    if not api_key or not folder_id:
        env_file = Path(__file__).parent.parent / '.env'
        if env_file.exists():
            with open(env_file) as f:
                for line in f:
                    line = line.strip()
                    if '=' in line and not line.startswith('#'):
                        key, value = line.split('=', 1)
                        value = value.strip('"\'')
                        if key in ['YANDEX_TRANSLATE_API_KEY', 'YANDEX_API_KEY']:
                            api_key = value
                        elif key == 'YANDEX_FOLDER_ID':
                            folder_id = value
    
    return api_key, folder_id


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(
        description='–ü–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —Å –Ω–µ–º–µ–¥–ª–µ–Ω–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã:
  # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ –Ω–µ–ø–µ—Ä–µ–≤–µ–¥—ë–Ω–Ω—ã–µ (15 req/s)
  python scripts/translate_exercises_sequential.py
  
  # –£–≤–µ–ª–∏—á–∏—Ç—å —Å–∫–æ—Ä–æ—Å—Ç—å –¥–æ 18 req/s
  python scripts/translate_exercises_sequential.py --rate-limit 18
  
  # –ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–Ω–æ–≤–æ
  python scripts/translate_exercises_sequential.py --force

–û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
  - –ú–æ–∂–Ω–æ –ø—Ä–µ—Ä–≤–∞—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç (Ctrl+C)
  - –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
  - –ü—Ä–æ—Å—Ç–æ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–Ω–æ–≤–∞ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è
        """
    )
    
    parser.add_argument('--api-key', help='Yandex Cloud API –∫–ª—é—á')
    parser.add_argument('--folder-id', help='Yandex Cloud Folder ID')
    parser.add_argument('--rate-limit', type=int, default=15, help='–ó–∞–ø—Ä–æ—Å–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É (default: 15)')
    parser.add_argument('--force', action='store_true', help='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ –∑–∞–Ω–æ–≤–æ')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å credentials
    api_key = args.api_key or load_credentials()[0]
    folder_id = args.folder_id or load_credentials()[1]
    
    if not api_key or not folder_id:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á –∏ Folder ID")
        print("   –î–æ–±–∞–≤—å—Ç–µ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ —á–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫
    translate_exercises_simple(
        api_key=api_key,
        folder_id=folder_id,
        requests_per_second=args.rate_limit,
        skip_existing=not args.force
    )


if __name__ == '__main__':
    main()
