#!/usr/bin/env python3
"""
–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Yandex Cloud Translate API
"""

import os
import sys
import django
import asyncio
import aiohttp
import json
from pathlib import Path
from typing import List, Dict, Optional
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django
sys.path.append(str(Path(__file__).resolve().parent.parent))
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from authentication.models import Exercise
from django.conf import settings
from asgiref.sync import sync_to_async


class YandexTranslator:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ —á–µ—Ä–µ–∑ Yandex Cloud Translate API"""
    
    def __init__(self, api_key: str, folder_id: str):
        self.api_key = api_key
        self.folder_id = folder_id
        self.base_url = "https://translate.api.cloud.yandex.net/translate/v2/translate"
        self.session: Optional[aiohttp.ClientSession] = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        self.total = 0
        self.translated = 0
        self.errors = 0
        self.skipped = 0
    
    async def __aenter__(self):
        self.session = aiohttp.ClientSession()
        return self
    
    async def __aexit__(self, exc_type, exc_val, exc_tb):
        if self.session:
            await self.session.close()
    
    async def translate_text(self, text: str, source_lang: str = 'en', target_lang: str = 'ru') -> Optional[str]:
        """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–¥–∏–Ω —Ç–µ–∫—Å—Ç"""
        if not self.session:
            raise RuntimeError("Session not initialized. Use 'async with' context manager")
        
        headers = {
            'Content-Type': 'application/json',
            'Authorization': f'Api-Key {self.api_key}'
        }
        
        payload = {
            'folderId': self.folder_id,
            'texts': [text],
            'sourceLanguageCode': source_lang,
            'targetLanguageCode': target_lang
        }
        
        try:
            async with self.session.post(self.base_url, headers=headers, json=payload) as response:
                if response.status == 200:
                    data = await response.json()
                    translations = data.get('translations', [])
                    if translations:
                        return translations[0].get('text')
                else:
                    error_text = await response.text()
                    print(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞ '{text}': {response.status} - {error_text}")
                    return None
        except Exception as e:
            print(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ '{text}': {e}")
            return None
    
    async def translate_batch(self, texts: List[str], batch_size: int = 100) -> List[Optional[str]]:
        """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –ø–∞–∫–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤"""
        if not self.session:
            raise RuntimeError("Session not initialized")
        
        # Yandex API –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –¥–æ 10000 —Å–∏–º–≤–æ–ª–æ–≤ –∑–∞ —Ä–∞–∑
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ –Ω–µ–±–æ–ª—å—à–∏–µ –±–∞—Ç—á–∏
        results = []
        
        for i in range(0, len(texts), batch_size):
            batch = texts[i:i + batch_size]
            batch_results = await asyncio.gather(
                *[self.translate_text(text) for text in batch],
                return_exceptions=True
            )
            
            for result in batch_results:
                if isinstance(result, Exception):
                    print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –±–∞—Ç—á–µ: {result}")
                    results.append(None)
                else:
                    results.append(result)
            
            # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –±–∞—Ç—á–∞–º–∏
            await asyncio.sleep(0.1)
        
        return results
    
    def print_stats(self):
        """–í—ã–≤–µ—Å—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        print("\n" + "="*60)
        print("üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–ï–†–ï–í–û–î–ê")
        print("="*60)
        print(f"–í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {self.total}")
        print(f"‚úÖ –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ: {self.translated}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥): {self.skipped}")
        print(f"‚ùå –û—à–∏–±–æ–∫: {self.errors}")
        print(f"–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—Ö–∞: {(self.translated / max(self.total - self.skipped, 1) * 100):.1f}%")
        print("="*60)


async def translate_exercises(
    api_key: str,
    folder_id: str,
    batch_size: int = 50,
    skip_existing: bool = True,
    dry_run: bool = False
):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç –≤—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
    
    Args:
        api_key: API –∫–ª—é—á Yandex Cloud
        folder_id: ID –ø–∞–ø–∫–∏ –≤ Yandex Cloud
        batch_size: –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –ø–µ—Ä–µ–≤–æ–¥–∞
        skip_existing: –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º
        dry_run: –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    """
    
    # –ü–æ–ª—É—á–∏—Ç—å —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞
    if skip_existing:
        qs = Exercise.objects.filter(name_ru='')
    else:
        qs = Exercise.objects.all()

    exercises = await sync_to_async(list)(qs)
    total_count = len(exercises)
    
    if total_count == 0:
        print("‚úÖ –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã!")
        return
    
    print(f"üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–µ—Ä–µ–≤–æ–¥ {total_count} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...")
    print(f"üì¶ –†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞: {batch_size}")
    print(f"üß™ –†–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {'–î–∞' if dry_run else '–ù–µ—Ç'}")
    print("")
    
    async with YandexTranslator(api_key, folder_id) as translator:
        translator.total = total_count
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –±–∞—Ç—á–∞–º –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –ø–∞–º—è—Ç–∏
        for i in range(0, total_count, batch_size):
            batch = list(exercises[i:i + batch_size])
            
            print(f"üì¶ –ë–∞—Ç—á {i//batch_size + 1}/{(total_count + batch_size - 1)//batch_size}")
            print(f"   –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è {i+1}-{min(i+batch_size, total_count)} –∏–∑ {total_count}")
            
            # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç—ã –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞
            texts_to_translate = []
            exercises_map = {}
            
            for exercise in batch:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å –ø–µ—Ä–µ–≤–æ–¥
                if skip_existing and exercise.name_ru:
                    translator.skipped += 1
                    continue
                
                texts_to_translate.append(exercise.name)
                exercises_map[exercise.name] = exercise
            
            if not texts_to_translate:
                print("   ‚è≠Ô∏è  –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è –≤ –±–∞—Ç—á–µ —É–∂–µ –ø–µ—Ä–µ–≤–µ–¥–µ–Ω—ã")
                continue
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ
            translations = await translator.translate_batch(texts_to_translate, batch_size=20)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            updated_exercises = []
            
            for original, translation in zip(texts_to_translate, translations):
                exercise = exercises_map[original]
                
                if translation:
                    exercise.name_ru = translation
                    updated_exercises.append(exercise)
                    translator.translated += 1
                    print(f"   ‚úÖ {original[:50]:<50} ‚Üí {translation[:50]}")
                else:
                    translator.errors += 1
                    print(f"   ‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏: {original}")
            
            # Bulk update –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            if updated_exercises and not dry_run:
                await sync_to_async(Exercise.objects.bulk_update)(updated_exercises, ['name_ru'])
            
            print("")
        
        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        translator.print_stats()
        
        if dry_run:
            print("\n‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –≠—Ç–æ –±—ã–ª —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫. –ò–∑–º–µ–Ω–µ–Ω–∏—è –ù–ï —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")


async def translate_single_exercise(exercise_id: str, api_key: str, folder_id: str):
    """–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ"""
    try:
        exercise = Exercise.objects.get(id=exercise_id)
    except Exercise.DoesNotExist:
        print(f"‚ùå –£–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ —Å ID {exercise_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return
    
    print(f"üìù –ü–µ—Ä–µ–≤–æ–¥–∏–º: {exercise.name}")
    
    async with YandexTranslator(api_key, folder_id) as translator:
        translation = await translator.translate_text(exercise.name)
        
        if translation:
            exercise.name_ru = translation
            exercise.save()
            print(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥: {translation}")
            print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –ë–î")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–≤–µ—Å—Ç–∏")


def load_credentials():
    """–ó–∞–≥—Ä—É–∑–∏—Ç—å credentials –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ —Ñ–∞–π–ª–∞"""
    api_key = os.getenv('YANDEX_TRANSLATE_API_KEY')
    folder_id = os.getenv('YANDEX_FOLDER_ID')
    
    if not api_key or not folder_id:
        # –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ .env
        env_file = Path(__file__).parent.parent / '.env'
        if env_file.exists():
            with open(env_file) as f:
                for line in f:
                    line = line.strip()
                    if line.startswith('YANDEX_TRANSLATE_API_KEY='):
                        api_key = line.split('=', 1)[1].strip('"\'')
                    elif line.startswith('YANDEX_FOLDER_ID='):
                        folder_id = line.split('=', 1)[1].strip('"\'')
    
    return api_key, folder_id


async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import argparse
    
    parser = argparse.ArgumentParser(description='–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –Ω–∞ —Ä—É—Å—Å–∫–∏–π')
    parser.add_argument('--api-key', help='Yandex Cloud API –∫–ª—é—á')
    parser.add_argument('--folder-id', help='Yandex Cloud Folder ID')
    parser.add_argument('--batch-size', type=int, default=50, help='–†–∞–∑–º–µ—Ä –±–∞—Ç—á–∞ (default: 50)')
    parser.add_argument('--force', action='store_true', help='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –≤—Å–µ, –¥–∞–∂–µ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –ø–µ—Ä–µ–≤–æ–¥–æ–º')
    parser.add_argument('--dry-run', action='store_true', help='–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è')
    parser.add_argument('--exercise-id', help='–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ –æ–¥–Ω–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–µ')
    
    args = parser.parse_args()
    
    # –ó–∞–≥—Ä—É–∑–∏—Ç—å credentials
    api_key = args.api_key
    folder_id = args.folder_id
    
    if not api_key or not folder_id:
        env_api_key, env_folder_id = load_credentials()
        api_key = api_key or env_api_key
        folder_id = folder_id or env_folder_id
    
    if not api_key or not folder_id:
        print("‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å API –∫–ª—é—á –∏ Folder ID:")
        print("   1. –ß–µ—Ä–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç—ã: --api-key YOUR_KEY --folder-id YOUR_FOLDER_ID")
        print("   2. –ß–µ—Ä–µ–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: YANDEX_TRANSLATE_API_KEY –∏ YANDEX_FOLDER_ID")
        print("   3. –ß–µ—Ä–µ–∑ —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞")
        print("\nüìñ –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å credentials:")
        print("   https://cloud.yandex.ru/docs/translate/api-ref/authentication")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫
    if args.exercise_id:
        await translate_single_exercise(args.exercise_id, api_key, folder_id)
    else:
        await translate_exercises(
            api_key=api_key,
            folder_id=folder_id,
            batch_size=args.batch_size,
            skip_existing=not args.force,
            dry_run=args.dry_run
        )


if __name__ == '__main__':
    asyncio.run(main())
