"""
–ü–∞—Ä—Å–µ—Ä —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ –∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python scripts/parse_exercises_with_images.py
"""

import json
import os
import requests
from typing import Dict, List, Optional
import time


class ExerciseParserWithImages:
    """–ü–∞—Ä—Å–µ—Ä —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    GITHUB_API = "https://api.github.com/repos/wrkout/exercises.json/contents/exercises"
    RAW_BASE_URL = "https://raw.githubusercontent.com/wrkout/exercises.json/master/exercises"
    
    # –ú–∞–ø–ø–∏–Ω–≥ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –¥–ª—è gym —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π
    CATEGORY_MAPPING = {
        'strength': 'physical',
        'stretching': 'physical',
        'plyometrics': 'physical',
        'strongman': 'physical',
        'powerlifting': 'physical',
        'cardio': 'physical',
        'olympic weightlifting': 'physical',
        'crossfit': 'physical',
        'weighted bodyweight': 'physical',
        'assisted bodyweight': 'physical',
    }
    
    LEVEL_MAPPING = {
        'beginner': 'beginner',
        'intermediate': 'intermediate',
        'expert': 'advanced',
    }
    
    # –ü–µ—Ä–µ–≤–æ–¥ –≥—Ä—É–ø–ø –º—ã—à—Ü –¥–ª—è –æ–ø–∏—Å–∞–Ω–∏—è
    MUSCLE_TRANSLATION = {
        'abdominals': '–ø—Ä–µ—Å—Å',
        'hamstrings': '–±–∏—Ü–µ–ø—Å –±–µ–¥—Ä–∞',
        'calves': '–∏–∫—Ä—ã',
        'shoulders': '–ø–ª–µ—á–∏',
        'adductors': '–ø—Ä–∏–≤–æ–¥—è—â–∏–µ',
        'glutes': '—è–≥–æ–¥–∏—Ü—ã',
        'quadriceps': '–∫–≤–∞–¥—Ä–∏—Ü–µ–ø—Å',
        'biceps': '–±–∏—Ü–µ–ø—Å',
        'forearms': '–ø—Ä–µ–¥–ø–ª–µ—á—å—è',
        'abductors': '–æ—Ç–≤–æ–¥—è—â–∏–µ',
        'triceps': '—Ç—Ä–∏—Ü–µ–ø—Å',
        'chest': '–≥—Ä—É–¥—å',
        'lower back': '–ø–æ—è—Å–Ω–∏—Ü–∞',
        'traps': '—Ç—Ä–∞–ø–µ—Ü–∏–∏',
        'middle back': '—Å—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å —Å–ø–∏–Ω—ã',
        'lats': '—à–∏—Ä–æ—á–∞–π—à–∏–µ',
        'neck': '—à–µ—è',
    }
    
    EQUIPMENT_TRANSLATION = {
        'barbell': '–®—Ç–∞–Ω–≥–∞',
        'dumbbell': '–ì–∞–Ω—Ç–µ–ª–∏',
        'body only': '–°–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –≤–µ—Å',
        'machine': '–¢—Ä–µ–Ω–∞–∂—ë—Ä',
        'cable': '–ë–ª–æ—á–Ω—ã–π —Ç—Ä–µ–Ω–∞–∂—ë—Ä',
        'kettlebells': '–ì–∏—Ä–∏',
        'bands': '–†–µ–∑–∏–Ω–æ–≤—ã–µ –ª–µ–Ω—Ç—ã',
        'medicine ball': '–ú–µ–¥–±–æ–ª',
        'exercise ball': '–§–∏—Ç–±–æ–ª',
        'foam roll': '–ú–∞—Å—Å–∞–∂–Ω—ã–π —Ä–æ–ª–∏–∫',
        'e-z curl bar': 'EZ-–≥—Ä–∏—Ñ',
    }
    
    def __init__(self):
        self.exercises = []
    
    def fetch_exercise_list(self) -> List[str]:
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        print("üì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π –∏–∑ GitHub...")
        
        try:
            response = requests.get(self.GITHUB_API, timeout=10)
            response.raise_for_status()
            data = response.json()
            
            folders = [item['name'] for item in data if item['type'] == 'dir']
            print(f"‚úì –ù–∞–π–¥–µ–Ω–æ {len(folders)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
            return folders
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            return []
    
    def fetch_exercise_data(self, folder_name: str) -> Optional[Dict]:
        """–ó–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        url = f"{self.RAW_BASE_URL}/{folder_name}/exercise.json"
        
        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            return None
    
    def get_image_urls(self, folder_name: str) -> tuple:
        """–ü–æ–ª—É—á–∏—Ç—å URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è"""
        # –í —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ–±—ã—á–Ω–æ –Ω–∞–∑—ã–≤–∞—é—Ç—Å—è 0.jpg –∏ 1.jpg
        image_0 = f"{self.RAW_BASE_URL}/{folder_name}/images/0.jpg"
        image_1 = f"{self.RAW_BASE_URL}/{folder_name}/images/1.jpg"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        try:
            response = requests.head(image_0, timeout=5)
            main_image = image_0 if response.status_code == 200 else None
        except:
            main_image = None
        
        try:
            response = requests.head(image_1, timeout=5)
            secondary_image = image_1 if response.status_code == 200 else None
        except:
            secondary_image = None
        
        return main_image, secondary_image
    
    def adapt_exercise(self, raw_data: Dict, folder_name: str) -> Dict:
        """–ê–¥–∞–ø—Ç–∞—Ü–∏—è –ø–æ–¥ –Ω–∞—à—É —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏"""
        
        # –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ (–ë–ï–ó –ø–µ—Ä–µ–≤–æ–¥–∞)
        name = raw_data.get('name', 'Unknown Exercise')
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏—è
        category = self.CATEGORY_MAPPING.get(
            raw_data.get('category', 'strength').lower(),
            'physical'
        )
        
        # –°–ª–æ–∂–Ω–æ—Å—Ç—å
        difficulty = self.LEVEL_MAPPING.get(
            raw_data.get('level', 'beginner').lower(),
            'beginner'
        )
        
        # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º)
        instructions = raw_data.get('instructions', [])
        instructions_text = '\n'.join([f"{i+1}. {instr}" for i, instr in enumerate(instructions)])
        
        # –û–ø–∏—Å–∞–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º—ã—à—Ü–∞—Ö (–Ω–∞ —Ä—É—Å—Å–∫–æ–º –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞)
        primary_muscles = raw_data.get('primaryMuscles', [])
        secondary_muscles = raw_data.get('secondaryMuscles', [])
        equipment = raw_data.get('equipment', '')
        force = raw_data.get('force', '')
        mechanic = raw_data.get('mechanic', '')
        
        description_parts = []
        
        if primary_muscles:
            muscles_ru = [self.MUSCLE_TRANSLATION.get(m, m) for m in primary_muscles]
            description_parts.append(f"Primary muscles: {', '.join(muscles_ru)}")
        
        if secondary_muscles:
            muscles_ru = [self.MUSCLE_TRANSLATION.get(m, m) for m in secondary_muscles]
            description_parts.append(f"Secondary muscles: {', '.join(muscles_ru)}")
        
        if equipment:
            equipment_ru = self.EQUIPMENT_TRANSLATION.get(equipment.lower(), equipment)
            description_parts.append(f"Equipment: {equipment_ru}")
        
        if force:
            description_parts.append(f"Force: {force}")
        
        if mechanic:
            description_parts.append(f"Mechanic: {mechanic}")
        
        description = raw_data.get('description', '')
        if description:
            description_parts.insert(0, description)
        
        full_description = '\n'.join(description_parts)
        
        # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        image_main, image_secondary = self.get_image_urls(folder_name)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∞–ª–∏–∞—Å—ã (–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ aliases + –≤–∞—Ä–∏–∞–Ω—Ç—ã)
        aliases = raw_data.get('aliases', [])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∞—Ä–∏–∞–Ω—Ç —Å –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ–º
        if equipment and equipment.lower() not in name.lower():
            aliases.append(f"{name} ({equipment})")
        
        return {
            'model': 'authentication.exercise',
            'pk': None,
            'fields': {
                'name': name,  # –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï –Ω–∞–∑–≤–∞–Ω–∏–µ
                'name_ru': '',  # –ë—É–¥–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–æ –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç –ø–µ—Ä–µ–≤–æ–¥–∞
                'description': full_description[:1000] if full_description else '',
                'category': category,
                'difficulty': difficulty,
                'duration_min': None,
                'duration_max': None,
                'repetitions': None,
                'instructions': instructions_text,
                'audio_url': None,
                'video_url': None,
                'image_url_main': image_main,
                'image_url_secondary': image_secondary,
                'is_active': True,
                'usage_count': 0,
                'created_at': '2025-10-13T12:00:00Z',
                'updated_at': '2025-10-13T12:00:00Z',
            },
            'aliases': list(set(aliases))[:20],  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ
            'raw_data': {
                'primaryMuscles': primary_muscles,
                'secondaryMuscles': secondary_muscles,
                'equipment': equipment,
                'force': force,
                'mechanic': mechanic,
            }
        }
    
    def parse_all(self, limit: Optional[int] = None) -> List[Dict]:
        """–ü–∞—Ä—Å–∏–Ω–≥ –≤—Å–µ—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π"""
        folders = self.fetch_exercise_list()
        
        if limit:
            folders = folders[:limit]
            print(f"‚ö†Ô∏è  –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {limit} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π")
        
        print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(folders)} —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π...\n")
        
        for i, folder in enumerate(folders, 1):
            print(f"[{i}/{len(folders)}] {folder}...", end=' ')
            
            raw_data = self.fetch_exercise_data(folder)
            if raw_data:
                exercise = self.adapt_exercise(raw_data, folder)
                self.exercises.append(exercise)
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                has_images = "üñºÔ∏è" if exercise['fields']['image_url_main'] else "üìÑ"
                print(f"‚úì {has_images} {exercise['fields']['name']}")
            else:
                print("‚úó")
            
            # –ó–∞–¥–µ—Ä–∂–∫–∞
            time.sleep(0.2)
        
        print(f"\n‚úì –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {len(self.exercises)}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        with_images = sum(1 for ex in self.exercises if ex['fields']['image_url_main'])
        print(f"üìä –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images}/{len(self.exercises)}")
        
        return self.exercises
    
    def save_to_fixture(self, filename: str = 'gym_exercises.json'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ"""
        base_dir = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        output_path = os.path.join(base_dir, 'authentication/fixtures', filename)
        
        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        
        fixture_data = []
        aliases_data = {}
        metadata = {}
        
        for exercise in self.exercises:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞–ª–∏–∞—Å—ã –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
            aliases = exercise.pop('aliases', [])
            raw_data = exercise.pop('raw_data', {})
            
            fixture_data.append(exercise)
            
            exercise_name = exercise['fields']['name']
            aliases_data[exercise_name] = aliases
            metadata[exercise_name] = raw_data
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(fixture_data, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –£–ø—Ä–∞–∂–Ω–µ–Ω–∏—è: {output_path}")
        
        # –ê–ª–∏–∞—Å—ã
        aliases_path = output_path.replace('.json', '_aliases.json')
        with open(aliases_path, 'w', encoding='utf-8') as f:
            json.dump(aliases_data, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –ê–ª–∏–∞—Å—ã: {aliases_path}")
        
        # –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–¥–ª—è –±—É–¥—É—â–µ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
        metadata_path = output_path.replace('.json', '_metadata.json')
        with open(metadata_path, 'w', encoding='utf-8') as f:
            json.dump(metadata, f, ensure_ascii=False, indent=2)
        
        print(f"üíæ –ú–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ: {metadata_path}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        print(f"\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   –í—Å–µ–≥–æ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π: {len(fixture_data)}")
        print(f"   –í—Å–µ–≥–æ –∞–ª–∏–∞—Å–æ–≤: {sum(len(a) for a in aliases_data.values())}")
        with_images = sum(1 for ex in fixture_data if ex['fields']['image_url_main'])
        print(f"   –° –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏: {with_images}")
        
        return output_path, aliases_path


def main():
    print("=" * 70)
    print("üèãÔ∏è  –ü–ê–†–°–ï–† –£–ü–†–ê–ñ–ù–ï–ù–ò–ô –° –ò–ó–û–ë–†–ê–ñ–ï–ù–ò–Ø–ú–ò")
    print("=" * 70)
    print("\n‚ö†Ô∏è  –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –û–†–ò–ì–ò–ù–ê–õ–¨–ù–´–ï –Ω–∞–∑–≤–∞–Ω–∏—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º")
    print("   –ü–µ—Ä–µ–≤–æ–¥ –º–æ–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –æ—Ç–¥–µ–ª—å–Ω—É—é –∫–æ–º–∞–Ω–¥—É\n")
    
    parser = ExerciseParserWithImages()
    
    print("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º:")
    print("  1) –í—Å–µ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è (~800+, –∑–∞–π–º—ë—Ç ~10-15 –º–∏–Ω—É—Ç)")
    print("  2) –¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∂–∏–º (50 —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π, ~2 –º–∏–Ω—É—Ç—ã)")
    print("  3) –£–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ")
    
    choice = input("\n–í—ã–±–æ—Ä [1/2/3]: ").strip()
    
    limit = None
    if choice == '2':
        limit = 50
    elif choice == '3':
        try:
            limit = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: "))
        except:
            limit = 50
    
    exercises = parser.parse_all(limit=limit)
    
    if exercises:
        parser.save_to_fixture()
        
        print("\n" + "=" * 70)
        print("‚úÖ –ì–û–¢–û–í–û!")
        print("=" * 70)
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("  1. python3 manage.py makemigrations")
        print("  2. python3 manage.py migrate")
        print("  3. python3 manage.py loaddata authentication/fixtures/gym_exercises.json")
        print("  4. python3 manage.py load_gym_aliases")
        print("\nüí° –ü–µ—Ä–µ–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏–π –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É –∏–ª–∏ API")
        print()


if __name__ == '__main__':
    main()
