#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ —É–ª—É—á—à–µ–Ω–Ω—ã–º AI endpoints
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π —Å –¥–µ—Ç–∞–ª—å–Ω—ã–º–∏ –ø—Ä–æ–º–ø—Ç–∞–º–∏
"""

import requests
import json

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = 'http://89.22.235.198'
# –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à —Ç–æ–∫–µ–Ω –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
ACCESS_TOKEN = 'your-access-token-here'

headers = {
    'Authorization': f'Bearer {ACCESS_TOKEN}',
    'Content-Type': 'application/json'
}


def test_parse_workout_basic():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—Å—Ç–∞"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 1: –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—Å—Ç–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    print("="*60)
    
    texts = [
        "–∂–∏–º –ª—ë–∂–∞ 80 –∫–≥ 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 10",
        "–ø—Ä–∏—Å–µ–¥ 100–∫–≥ 5 –ø–æ 5, —Å—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ 120–∫–≥ 3—Ö8",
        "–ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è —Å–≤–æ–µ–≥–æ –≤–µ—Å–∞ 3 –ø–æ–¥—Ö–æ–¥–∞ –ø–æ 12 –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π",
        "bench press 185 lbs 3x8",  # –∞–Ω–≥–ª–∏–π—Å–∫–∏–π
    ]
    
    for text in texts:
        print(f"\n–í—Ö–æ–¥: {text}")
        
        response = requests.post(
            f'{API_BASE_URL}/api/auth/parse-workout/',
            headers=headers,
            json={'text': text}
        )
        
        if response.ok:
            result = response.json()
            print(f"‚úì –û—Ç–≤–µ—Ç: {json.dumps(result['workout'], indent=2, ensure_ascii=False)}")
        else:
            print(f"‚úó –û—à–∏–±–∫–∞: {response.text}")


def test_parse_workout_complex():
    """–¢–µ—Å—Ç —Å–ª–æ–∂–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 2: –°–ª–æ–∂–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ (—Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã)")
    print("="*60)
    
    complex_text = """
    –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:
    1. –ñ–∏–º —à—Ç–∞–Ω–≥–∏ –ª—ë–∂–∞ - 80–∫–≥ –Ω–∞ 10, –ø–æ—Ç–æ–º 85–∫–≥ –Ω–∞ 8, –ø–æ—Å–ª–µ–¥–Ω–∏–π 90 –Ω–∞ 6
    2. –†–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π 20 –∫–≥ - 3 —Å–µ—Ç–∞ –ø–æ 12
    3. –§—Ä–∞–Ω—Ü—É–∑—Å–∫–∏–π –∂–∏–º 35 –∫–∏–ª–æ–≥—Ä–∞–º–º 10 –ø–æ–≤—Ç–æ—Ä–æ–≤ 3 –ø–æ–¥—Ö–æ–¥–∞
    """
    
    print(f"–í—Ö–æ–¥:\n{complex_text}")
    
    response = requests.post(
        f'{API_BASE_URL}/api/auth/parse-workout/',
        headers=headers,
        json={'text': complex_text}
    )
    
    if response.ok:
        result = response.json()
        print(f"\n‚úì Structured data:")
        print(json.dumps(result['workout'], indent=2, ensure_ascii=False))
        print(f"\nFormatted text: {result['workout'].get('formatted_text', '')}")
    else:
        print(f"‚úó –û—à–∏–±–∫–∞: {response.text}")


def test_recommendations_simple():
    """–¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è)"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 3: AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏—Å—Ç–æ—Ä–∏—è)")
    print("="*60)
    
    history = """
    –ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏:
    - 10.10.2025: –ñ–∏–º –ª—ë–∂–∞ 80–∫–≥ 3x10, –ñ–∏–º –≥–∞–Ω—Ç–µ–ª–µ–π 25–∫–≥ 3x10
    - 08.10.2025: –°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ 120–∫–≥ 3x8, –ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è 100–∫–≥ 5x5
    - 06.10.2025: –ñ–∏–º –ª—ë–∂–∞ 75–∫–≥ 3x12, –†–∞–∑–≤–æ–¥–∫–∞ –≥–∞–Ω—Ç–µ–ª–µ–π 20–∫–≥ 3x12
    - 04.10.2025: –°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞ 110–∫–≥ 5x5, –ü–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏—è 3x10
    
    –¶–µ–ª—å: –Ω–∞–±–æ—Ä –º—ã—à–µ—á–Ω–æ–π –º–∞—Å—Å—ã
    """
    
    print(f"–ò—Å—Ç–æ—Ä–∏—è:\n{history}")
    
    response = requests.post(
        f'{API_BASE_URL}/api/auth/ai-recommendations/',
        headers=headers,
        json={'history': history}
    )
    
    if response.ok:
        result = response.json()
        print("\n‚úì –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, rec in enumerate(result['recommendations'], 1):
            print(f"\n{i}. [{rec.get('type', 'general').upper()}] {rec.get('title', '')}")
            print(f"   –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: {rec.get('priority', 'medium')}")
            print(f"   {rec.get('description', '')}")
    else:
        print(f"‚úó –û—à–∏–±–∫–∞: {response.text}")


def test_recommendations_structured():
    """–¢–µ—Å—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 4: AI –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ (—Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)")
    print("="*60)
    
    data = {
        "workouts": [
            {
                "date": "2025-10-10",
                "exercises": [
                    {
                        "name": "–ñ–∏–º –ª—ë–∂–∞",
                        "sets": [
                            {"weight": 80, "reps": 10},
                            {"weight": 80, "reps": 10},
                            {"weight": 80, "reps": 9}
                        ]
                    },
                    {
                        "name": "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è",
                        "sets": [
                            {"weight": 100, "reps": 5},
                            {"weight": 100, "reps": 5},
                            {"weight": 100, "reps": 4}
                        ]
                    }
                ]
            },
            {
                "date": "2025-10-08",
                "exercises": [
                    {
                        "name": "–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞",
                        "sets": [
                            {"weight": 120, "reps": 8},
                            {"weight": 120, "reps": 7},
                            {"weight": 120, "reps": 6}
                        ]
                    }
                ]
            }
        ],
        "stats": {
            "totalWorkouts": 15,
            "totalVolume": 45000,
            "currentStreak": 3,
            "avgFrequency": 3.5
        },
        "records": {
            "–ñ–∏–º –ª—ë–∂–∞": {"weight": 85, "reps": 8, "date": "2025-10-05"},
            "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è": {"weight": 110, "reps": 5, "date": "2025-09-28"},
            "–°—Ç–∞–Ω–æ–≤–∞—è —Ç—è–≥–∞": {"weight": 130, "reps": 5, "date": "2025-10-01"}
        }
    }
    
    print("–û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
    
    response = requests.post(
        f'{API_BASE_URL}/api/auth/ai-recommendations/',
        headers=headers,
        json=data
    )
    
    if response.ok:
        result = response.json()
        print("\n‚úì –ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for i, rec in enumerate(result['recommendations'], 1):
            priority_emoji = {
                'high': 'üî¥',
                'medium': 'üü°',
                'low': 'üü¢'
            }.get(rec.get('priority', 'medium'), '‚ö™')
            
            print(f"\n{i}. {priority_emoji} [{rec.get('type', 'general').upper()}] {rec.get('title', '')}")
            print(f"   {rec.get('description', '')}")
    else:
        print(f"‚úó –û—à–∏–±–∫–∞: {response.text}")


def test_image_analysis():
    """–¢–µ—Å—Ç –∞–Ω–∞–ª–∏–∑–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –æ—á–∏—Å—Ç–∫–æ–π —Ç–µ–∫—Å—Ç–∞"""
    print("\n" + "="*60)
    print("–¢–ï–°–¢ 5: –ê–Ω–∞–ª–∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏")
    print("="*60)
    
    # –î–ª—è —Ç–µ—Å—Ç–∞ –Ω—É–∂–Ω–æ –∏–º–µ—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    try:
        with open('test_workout_image.jpg', 'rb') as f:
            files = {'image': f}
            
            response = requests.post(
                f'{API_BASE_URL}/api/auth/analyze-image/',
                headers={'Authorization': f'Bearer {ACCESS_TOKEN}'},
                files=files
            )
            
            if response.ok:
                result = response.json()
                print(f"\n‚úì –ò–∑–≤–ª–µ—á—ë–Ω–Ω—ã–π –∏ –æ—á–∏—â–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:")
                print(result['text'])
            else:
                print(f"‚úó –û—à–∏–±–∫–∞: {response.text}")
    except FileNotFoundError:
        print("‚ö† –§–∞–π–ª test_workout_image.jpg –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–°–æ–∑–¥–∞–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å —Ç–µ–∫—Å—Ç–æ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∞")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("="*60)
    print("–¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –£–õ–£–ß–®–ï–ù–ù–´–• AI ENDPOINTS")
    print("="*60)
    
    if ACCESS_TOKEN == 'your-access-token-here':
        print("\n‚ùå –û–®–ò–ë–ö–ê: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ ACCESS_TOKEN –≤ –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞")
        print("\n–ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å —Ç–æ–∫–µ–Ω:")
        print(f"curl -X POST {API_BASE_URL}/api/auth/login/ \\")
        print('  -H "Content-Type: application/json" \\')
        print('  -d \'{"email":"your@email.com","password":"your-password"}\'')
        return
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
        test_parse_workout_basic()
        test_parse_workout_complex()
        test_recommendations_simple()
        test_recommendations_structured()
        test_image_analysis()
        
        print("\n" + "="*60)
        print("‚úì –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ó–ê–í–ï–†–®–ï–ù–û")
        print("="*60)
        
    except KeyboardInterrupt:
        print("\n\n‚ö† –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ—Ä–≤–∞–Ω–æ")
    except Exception as e:
        print(f"\n\n‚ùå –û—à–∏–±–∫–∞: {e}")


if __name__ == '__main__':
    main()
